// HelloWorldFreeRunLine.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include "globle.h"
#include "MicroDisplayInit.h"


#define CONFIG_FILENAME "anOriginalConfigFileName.mcf"

int ErrorMessage(Fg_Struct *fg)
{
	int			error = Fg_getLastErrorNumber(fg);
	const char*	err_str = Fg_getLastErrorDescription(fg);
	fprintf(stderr, "Error: %d : %s\n", error, err_str);
	return error;
}
int ErrorMessageWait(Fg_Struct *fg)
{
	int			error = ErrorMessage(fg);
	printf(" ... press ENTER to continue\n");
	getchar();
	return error;
}
// returns the bit with according to the selected image format
int getNoOfBitsFromImageFormat(const int format)
{
	int Bits = 8;
	switch (format){
	case FG_GRAY:
		Bits = 8;
		break;
	case FG_GRAY16:
		Bits = 16;
		break;
	case FG_COL24:
	case FG_COL48:
		Bits = 24;
		break;
	default:
		Bits = 8;
		break;
	};
	return Bits;
}
static int getNrOfBoards()
{
	int nrOfBoards = 0;
	char buffer[256];
	unsigned int buflen = 256;
	buffer[0] = 0;

	// availability : starting with RT 5.2
	if (Fg_getSystemInformation(NULL, INFO_NR_OF_BOARDS, PROP_ID_VALUE, 0, buffer, &buflen) == FG_OK){
		nrOfBoards = atoi(buffer);
	}
	return nrOfBoards;

}

// get board and camera-link serial port information
// using silicon-software runtime library fglib5
int getBoardInfo()
{
	int boardType;
	int i = 0;

	int maxNrOfboards = 10;// use a constant no. of boards to query, when evaluations versions minor to RT 5.2
	int nrOfBoardsFound = 0;
	int maxBoardIndex = -1;
	int iPortCount = 0;
	int nrOfBoardsPresent = 0;

	// detect all boards
	nrOfBoardsPresent = getNrOfBoards();
	if (!nrOfBoardsPresent)
		return 0;

	for (i = 0; i < maxNrOfboards; i++) {
		int iPortNrOnBoard = 0;
		const char * boardName;
		bool skipIndex = false;
		boardType = Fg_getBoardType(i);
		switch (boardType) {
		case PN_MICROENABLE4AS1CL:
			boardName = "MicroEnable IV AS1-CL";
			iPortNrOnBoard = 1;
			break;
		case PN_MICROENABLE4AD1CL:
			boardName = "MicroEnable IV AD1-CL";
			iPortNrOnBoard = 1;
			break;
		case PN_MICROENABLE4VD1CL:
			boardName = "MicroEnable IV VD1-CL";
			iPortNrOnBoard = 2;
			break;
		case PN_MICROENABLE4AD4CL:
			boardName = "MicroEnable IV AD4-CL";
			iPortNrOnBoard = 2;
			break;
		case PN_MICROENABLE4VD4CL:
			boardName = "MicroEnable IV VD4-CL";
			iPortNrOnBoard = 2;
			break;
			// ignore the non-cameralink boards
		case PN_MICROENABLE3I:
		case PN_MICROENABLE3IXXL:
		case PN_MICROENABLE4AQ4GE:
		case PN_MICROENABLE4VQ4GE:
		default:
			boardName = "Unknown / Unsupported Board";
			skipIndex = true;
		}
		if (!skipIndex){
			nrOfBoardsFound++;
			maxBoardIndex = i;

			if (iPortNrOnBoard > 0){
				if (i == 0)
					printf("Following serial ports are available:\n");
				for (int j = 0; j < iPortNrOnBoard; j++){
					iPortCount++;
					printf("%d. Board_%u %s (%x) Port_%d\n", iPortCount - 1, i, boardName, boardType, j);
				}
			}
		}
		else{
		}
		if (nrOfBoardsFound >= nrOfBoardsPresent){
			break;// all boards are scanned
		}
	}
	return iPortCount;
}

int main()
{

	getBoardInfo();
	int nr_of_buffer = 8;			// Number of memory buffer
	int nBoard = 0;			// Board Number
	int nCamPort = PORT_A;		// Port (PORT_A / PORT_B / PORT_C / PORT_D)
	int MaxPics = 10000;		// Number of images to grab
	int status = 0;
	Fg_Struct *fg = 0;
	dma_mem *pMem0 = 0;
	MicroDisplayInit::InitParameter(fg, pMem0);
		return 0;




	const char *dllName = "DualLineGray16.dll";
	//const char *dllName = "DualLineRGB30.dll";

	// Initialization of the microEnable frame grabber
	if ((fg = Fg_Init(dllName, nBoard)) == NULL) {
		status = ErrorMessageWait(fg);
		return status;
	}
	fprintf(stdout, "Init Grabber ok\n");

	// Setting the image size
	int width = 4096;
	int height = 1;
	if (Fg_setParameter(fg, FG_WIDTH, &width, nCamPort) < 0) {
		status = ErrorMessageWait(fg);
		return status;
	}
	if (Fg_setParameter(fg, FG_HEIGHT, &height, nCamPort) < 0) {
		status = ErrorMessageWait(fg);
		return status;
	}
	int bitAlignment = FG_LEFT_ALIGNED;
	if (Fg_setParameter(fg, FG_BITALIGNMENT, &bitAlignment, nCamPort) < 0) {
		status = ErrorMessageWait(fg);
		return status;
	}
	fprintf(stdout, "Set Image Size on port %d (w: %d,h: %d) ok\n", nCamPort, width, height);


	// Memory allocation
	int format;
	Fg_getParameter(fg, FG_FORMAT, &format, nCamPort);
	size_t bytesPerPixel = 1;
	switch (format){
	case FG_GRAY:	bytesPerPixel = 1; break;
	case FG_GRAY16:	bytesPerPixel = 2; break;
	case FG_COL24:	bytesPerPixel = 3; break;
	case FG_COL32:	bytesPerPixel = 4; break;
	case FG_COL30:	bytesPerPixel = 5; break;
	case FG_COL48:	bytesPerPixel = 6; break;
	}
	size_t totalBufSize = width*height*nr_of_buffer*bytesPerPixel;
	dma_mem *pMem0;
	if ((pMem0 = Fg_AllocMemEx(fg, totalBufSize, nr_of_buffer)) == NULL){
		status = ErrorMessageWait(fg);
		return status;
	}
	else {
		fprintf(stdout, "%d framebuffer allocated for port %d ok\n", nr_of_buffer, nCamPort);
	}

	// Creating a display window for image output
	int Bits = getNoOfBitsFromImageFormat(format);

	int nId = ::CreateDisplay(Bits, width, height);
	SetBufferWidth(nId, width, height);

	if ((Fg_AcquireEx(fg, nCamPort, GRAB_INFINITE, ACQ_STANDARD, pMem0)) < 0){
		status = ErrorMessageWait(fg);
		return status;
	}

	// ====================================================
	// MAIN LOOP
	frameindex_t lastPicNr = 0;
	while ((lastPicNr = Fg_getLastPicNumberBlockingEx(fg, lastPicNr + 1, nCamPort, 10, pMem0))< MaxPics) {
		if (lastPicNr <0){
			status = ErrorMessageWait(fg);
			Fg_stopAcquireEx(fg, nCamPort, pMem0, 0);
			Fg_FreeMemEx(fg, pMem0);
			Fg_FreeGrabber(fg);
			CloseDisplay(nId);
			return status;
		}
		::DrawBuffer(nId, Fg_getImagePtrEx(fg, lastPicNr, 0, pMem0), (int)lastPicNr, "");
	}

	// ====================================================
	// Freeing the grabber resource
	Fg_stopAcquireEx(fg, nCamPort, pMem0, 0);
	Fg_FreeMemEx(fg, pMem0);
	Fg_FreeGrabber(fg);

	CloseDisplay(nId);
	return 0;
}

