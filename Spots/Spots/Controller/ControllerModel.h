#pragma once
#include <Class/Camera/e2v_EV71YC1CCL4005BA0/E2VCameraCycleBuffer.h>//必须放在这，否则会报错  XX定义不明确
#include <Class/IOCard/PCI1761/PCI1761.h>
#include <Class/Statistics/Statistics.h>

#include <View/SpotsMainView.h>

#include <opencv2/opencv.hpp>
#include <queue>
#include <thread>
#include <mutex>

#include <Model\Worker.h>
#include <Model\LogImgGenerator.h>
#include <Model\Arm.h>


using namespace std;

//#define ControllerModel_DEBUG

//控制器的模型
class ControllerModel
{
protected:
	SpotsMainView*  spotsMainView = NULL;

public:
	ControllerModel(SpotsMainView* _spotsMainView) :	spotsMainView(_spotsMainView)
	{
		spotsMainView->AddController(this);
	}
	~ControllerModel()
	{
		spotsMainView = NULL;
	}
	//是否为虚拟相机模式，本属性通过外部配置，在启动exe时若附加了virtual命令，则IsRealModel=0；
	bool IsRealModel = 1;


	//处理结束后显示处理结果
	//结果图像
	//产品类型，1A 2B 3C 4Rejcet
	void ImgProcessOverCallBack(cv::Mat image, int type)
	{
		ui_lock.lock();
		spotsMainView->ShowBigImg(image);
		if (type != 0)
		{
			switch (type)
			{
			case 1:Statistics::AddTodayA();
				logImg.AddItem(image, "A");
				break;
			case 2:Statistics::AddTodayB();
				logImg.AddItem(image, "B");
				break;
			case 3:Statistics::AddTodayC();
				logImg.AddItem(image, "C");
				break;
			case 4:
				Statistics::AddTodayRejected();
				logImg.AddItem(image, "D");
				arm.AddAction(0, 500);//0号output口在500ms后产生一个阶跃信号
				break;
			default:break;
			}

			spotsMainView->ShowLogImg(logImg.DrawingBoard);
			spotsMainView->UpdateStatistics();
		}
		ui_lock.unlock();
	}
	//采图完成后回调，用于将图片保存至硬盘
	void ImageGetCallBack(cv::Mat img)
	{
		if (SAVE_IMG)//是否要保存图片
		{
			//异步保存
			std::thread t_tiggerThread(std::mem_fn(&ControllerModel::imageSave), this, img);
			t_tiggerThread.detach();
			////同步保存
			//imageSave(img);
		}
		else
			MFCConsole::Output("当前为不保存图片模式\r\n");
	};

	// 在设置中调整了系统参数后，调用本方法将参数更新至算法中。
	void ResetParameter();

	/*****************虚拟相机模式方法*****************/
	void VirtualSelectImg(cv::Mat);
	void VirtualWorkerStart();
	/*****************虚拟相机模式方法 End*****************/


	bool ExitFlag = false;//triggerWatcher 结束标志
	bool PauseFlag = false;//triggerWatcher 暂停标志

protected:
	void imageSave(cv::Mat img);


	/**********************************/
	/*                                */
	/*           属性与对象           */
	/*                                */
	/**********************************/
	PCI1761 pci1761;
	LogImgGenerator logImg;
	Arm arm;

	//同时只允许两个工人工作，即只能两张图（两块砖）
	//工人1
	Worker *worker1 = NULL;
	//工人2
	Worker *worker2 = NULL;
	int workerindex = 0;//用于判断使用哪一个工人进行处理

	std::mutex ui_lock;
	std::mutex watcher_lock;
	std::mutex image_write_lock;




	/**********************************/
	/*                                */
	/*           虚函数接口           */
	/*                                */
	/**********************************/
public:
	//初始化
	virtual void Init() = 0;
	//析构
	virtual void Release() 
	{
		if (worker1 != NULL)
		{
			delete worker1;
			worker1 = NULL;
		}
		if (worker2 != NULL)
		{
			delete worker2;
			worker2 = NULL;
		}
	};
	//开始监控触发器线程
	virtual void TiggerStartWatch() = 0;
	//停止监控触发器线程
	virtual void TiggerStopWatch() = 0;

protected:
	virtual void triggerWatcherThread() = 0;//触发器监视线程
	virtual void captureAndProcessThread() = 0;//采图与工作委托






public:
	/**********************************/
	/*                                */
	/*            检测参数            */
	/*                                */
	/**********************************/
	bool SAVE_IMG = false;//是否保存图片到硬盘

	int Real_WidthMM = 600;//图像中瓷砖的横长
	int Real_LengthMM = 300;//图像中瓷砖的纵长
	int Worker_WaitTimeMSIn = 100;
	int Worker_WaitTimeMSOut = 250;
	int Worker_FrameTimeOut = 2000;


	/******************边缘缺陷参数***************/
	double BlockLocalizer_THRESHOD = 10;			//边缘查找二值化阈值
	double BlockLocalizer_ContinuePointCount = 30;	//连续多少个点则判断为边缘

	int  BlockEdgeDetector_Enable = 1;
	double BlockEdgeDetector_DIFF_THRESHOLD = 0.4;	//两图之差超过这个阈值则认为可能有缺陷
	double BlockEdgeDetector_FAULTS_SPAN = 4;		//大于DIFF_THRESHOLD的点附近近相邻FAULTS_SPAN像素内
	double BlockEdgeDetector_FAULTS_COUNT = 5;		//连续几个点大于DIFF_THRESHOLD则判定为缺陷

	int BlockEdgeLineDetector_Enable = 1;			//
	int BlockEdgeLineDetector_BINARY_THRESHOD = 5;	//二值化阈值
	int BlockEdgeLineDetector_LENGTH_THRESHOD = 5;	//超过这个长度才认为是缺陷（pix）
	int BlockEdgeLineDetector_DEEP_THRESHOD = 5;	//超过这个深度才认为是缺陷（pix）



	/**************分级参数*************/

	//边参数
	double Classify_EDGE_SINGLE_LENGTH_A = -1;
	double Classify_EDGE_SINGLE_LENGTH_B = -1;
	double Classify_EDGE_SINGLE_LENGTH_C = -1;
	double Classify_EDGE_SINGLE_LENGTH_ACCEPT = -1;

	double Classify_EDGE_TOTAL_LENGTH_A = -1;
	double Classify_EDGE_TOTAL_LENGTH_B = -1;
	double Classify_EDGE_TOTAL_LENGTH_C = -1;
	double Classify_EDGE_TOTAL_LENGTH_ACCEPT = -1;

	double Classify_EDGE_SINGLE_DEEP_A = -1;
	double Classify_EDGE_SINGLE_DEEP_B = -1;
	double Classify_EDGE_SINGLE_DEEP_C = -1;
	double Classify_EDGE_SINGLE_DEEP_ACCEPT = -1;

	double Classify_EDGE_TOTAL_DEEP_A = -1;
	double Classify_EDGE_TOTAL_DEEP_B = -1;
	double Classify_EDGE_TOTAL_DEEP_C = -1;
	double Classify_EDGE_TOTAL_DEEP_ACCEPT = -1;

	//凹坑参数
	double Classify_HOAL_DIAMETER_A = -1;
	double Classify_HOAL_DIAMETER_B = -1;
	double Classify_HOAL_DIAMETER_C = -1;
	double Classify_HOAL_DIAMETER_ACCEPT = -1;

	double Classify_HOAL_COUNT_A = -1;
	double Classify_HOAL_COUNT_B = -1;
	double Classify_HOAL_COUNT_C = -1;
	double Classify_HOAL_COUNT_ACCEPT = -1;


	//划痕
	double Classify_SCRATCH_SINGLE_LENGTH_A = -1;
	double Classify_SCRATCH_SINGLE_LENGTH_B = -1;
	double Classify_SCRATCH_SINGLE_LENGTH_C = -1;
	double Classify_SCRATCH_SINGLE_LENGTH_ACCEPT = -1;

	double Classify_SCRATCH_TOTAL_LENGTH_A = -1;
	double Classify_SCRATCH_TOTAL_LENGTH_B = -1;
	double Classify_SCRATCH_TOTAL_LENGTH_C = -1;
	double Classify_SCRATCH_TOTAL_LENGTH_ACCEPT = -1;


};